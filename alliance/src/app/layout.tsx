import {NotificationProvider, Refine} from "@refinedev/core";
import {RefineKbar, RefineKbarProvider} from "@refinedev/kbar";
import {RefineSnackbarProvider, useNotificationProvider} from "@refinedev/mui";
import routerProvider from "@refinedev/nextjs-router";
import {Metadata} from "next";
import {cookies} from "next/headers";
import React, {Suspense} from "react";

import {AppIcon} from "@components/app-icon";
import {ColorModeContextProvider} from "@contexts/color-mode";
import {authProvider} from "@providers/auth-provider";
import {dataProvider} from "@providers/data-provider";
import Cookies from "js-cookie";
import {accessControlProvider} from "@providers/access-provider";


export const metadata: Metadata = {
    title: "Refine",
    description: "Generated by create refine app",
    icons: {
        icon: "/favicon.ico",
    },
};

export default async function RootLayout({
                                             children,
                                         }: Readonly<{
    children: React.ReactNode;
}>) {
    const cookieStore = await cookies();
    const theme = cookieStore.get("theme");
    const defaultMode = theme?.value === "dark" ? "dark" : "light";

    const notificationProvider: NotificationProvider = {
        open: () => {
        },
        close: () => {
        },
    };

    const role = () => {
        const auth = JSON.parse(Cookies.get("auth") as string);
        console.log(auth?.role);
        return auth?.role;
    };

    return (
        <html lang="en">
        <body>
        <Suspense>
            <RefineKbarProvider>
                <ColorModeContextProvider defaultMode={defaultMode}>
                    <RefineSnackbarProvider key={123456}>
                        <Refine
                            routerProvider={routerProvider}
                            accessControlProvider={accessControlProvider}
                            dataProvider={{
                                default: dataProvider
                            }}
                            notificationProvider={useNotificationProvider}
                            authProvider={authProvider}
                            resources={[
                                {
                                    name: "dashboard",
                                    list: "/dashboard",
                                    meta: {
                                        canDelete: false,
                                        label: "Dashboard"
                                    },
                                },
                                {
                                    name: "map",
                                    list: "/map",
                                    meta: {
                                        canDelete: false,
                                        label: "Map"
                                    },
                                },
                                {
                                    name: "bulkload",
                                    list: "/bulkload",
                                    meta: {
                                        canDelete: false,
                                        label: "Import"
                                    },
                                },
                                {
                                    name: "export",
                                    list: "/export",
                                    meta: {
                                        canDelete: false,
                                        label: "Export"
                                    },
                                },
                                {
                                    name: "users",
                                    list: "/users",
                                    create: "/users/create",
                                    edit: "/users/edit/:id",
                                    show: "/users/show/:id",
                                    meta: {
                                        canDelete: true,
                                    },
                                },
                                {
                                    name: "addresses",
                                    list: "/addresses",
                                    create: "/addresses/create",
                                    edit: "/addresses/edit/:id",
                                    show: "/addresses/show/:id",
                                    meta: {
                                        canDelete: true,
                                    },
                                },
                                {
                                    name: "voters",
                                    list: "/voters",
                                    create: "/voters/create",
                                    edit: "/voters/edit/:id",
                                    show: "/voters/show/:id",
                                    meta: {
                                        canDelete: true,
                                    },
                                },
                                {
                                    name: "boards",
                                    list: "/boards",
                                    create: "/boards/create",
                                    edit: "/boards/edit/:id",
                                    show: "/boards/show/:id",
                                    meta: {
                                        canDelete: true,
                                        actions: {
                                            print: {
                                                path: "/boards/print/:id",
                                            },
                                        },
                                    },
                                },
                                {
                                    name: "questions",
                                    list: "/questions",
                                    create: "/questions/create",
                                    edit: "/questions/edit/:id",
                                    show: "/questions/show/:id",
                                    meta: {
                                        canDelete: true,
                                    },
                                },
                                {
                                    name: "boardstops",
                                    edit: "/boardstops/edit/:id",
                                    meta: {
                                        canDelete: true,
                                        hide: true
                                    },
                                },
                                {
                                    name: "boardruns",
                                    edit: "/boardruns/edit/:id",
                                    meta: {
                                        canDelete: false,
                                        hide: true
                                    },
                                },
                                {
                                    name: "boardrunsauth",
                                    list: "/boardrunsauth",
                                    meta: {
                                        canDelete: false,
                                        hide: true
                                    },
                                },
                                {
                                    name: "telling",
                                    list: "/telling",
                                    meta: {
                                        canDelete: false,
                                        label: "Telling"
                                    },
                                },

                            ]}
                            options={{
                                syncWithLocation: true,
                                warnWhenUnsavedChanges: true,
                                useNewQueryKeys: true,
                                projectId: "NnAe62-M5SJf9-hac2jm",
                                title: {text: "Alliance", icon: <AppIcon/>},
                            }}
                        >
                            {children}
                            <RefineKbar/>
                        </Refine>
                    </RefineSnackbarProvider>
                </ColorModeContextProvider>
            </RefineKbarProvider>
        </Suspense>
        </body>
        </html>
    );
}
