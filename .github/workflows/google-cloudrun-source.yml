# This workflow will deploy source code on Cloud Run when a commit is pushed to the $default-branch branch
#
# Overview:
#
# 1. Authenticate to Google Cloud
# 2. Deploy it to Cloud Run
#
# To configure this workflow:
#
# 1. Ensure the required Google Cloud APIs are enabled:
#
#    Cloud Run            run.googleapis.com
#    Cloud Build          cloudbuild.googleapis.com
#    Artifact Registry    artifactregistry.googleapis.com
#
# 2. Create and configure Workload Identity Federation for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Ensure the required IAM permissions are granted
#
#    Cloud Run
#      roles/run.admin
#      roles/iam.serviceAccountUser     (to act as the Cloud Run runtime service account)
#
#    Cloud Build
#      roles/cloudbuild.builds.editor
#
#    Cloud Storage
#      roles/storage.admin
#
#    Artifact Registry
#      roles/artifactregistry.admin     (project or repository level)
#
#    NOTE: You should always follow the principle of least privilege when assigning IAM roles
#
# 4. Create GitHub secrets for WIF_PROVIDER and WIF_SERVICE_ACCOUNT
#
# 5. Change the values for the SERVICE and REGION environment variables (below).
#
# For more support on how to run this workflow, please visit https://github.com/marketplace/actions/deploy-to-cloud-run
#
# Further reading:
#   Cloud Run runtime service account   - https://cloud.google.com/run/docs/securing/service-identity
#   Cloud Run IAM permissions           - https://cloud.google.com/run/docs/deploying-source-code#permissions_required_to_deploy
#   Cloud Run builds from source        - https://cloud.google.com/run/docs/deploying-source-code
#   Principle of least privilege        - https://cloud.google.com/blog/products/identity-security/dont-get-pwned-practicing-the-principle-of-least-privilege

name: Deploy to Cloud Run from Source

on:
  workflow_run:
    workflows: [ "Create Release" ]
    branches: [ main ]
    types:
      - completed

env:
  PROJECT_ID: alliance-dev-uk
  PROJECT_NUMBER: 344691125963
  FE_SERVICE: alliance
  BE_SERVICE: alliance-api
  CONSTITUENCY: "DEV DEV DEV"
  REGION: europe-west2

jobs:
  deploy:
    # Add 'id-token' with the intended permissions for workload identity federation
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get Latest Tag
        id: get-latest-tag
        uses: actions-ecosystem/action-get-latest-tag@v1

      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: projects/${{env.PROJECT_NUMBER}}/locations/global/workloadIdentityPools/github/providers/github-gcp-deploy
          service_account: ${{env.PROJECT_NUMBER}}-compute@developer.gserviceaccount.com
          project_id: ${{ env.PROJECT_ID }}

      - name: Create React Env
        run: |
          cd alliance
          cp .env.local .env
          echo NEXT_PUBLIC_API_URL=https://alliance-api-__PROJECT_NUMBER__.europe-west2.run.app/ > .env.local
          echo NEXT_PUBLIC_HOSTNAME=https://alliance-__PROJECT_NUMBER__.europe-west2.run.app >> .env.local
          echo NEXT_PUBLIC_CONSTITUENCY=__CONSTITUENCY__ >> .env.local
          echo NEXT_PUBLIC_MAP_KEY=__MAP_KEY__ >> .env.local
          cat .env.local  

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.FE_SERVICE }}
          region: ${{ env.REGION }}
          source: ./alliance
          env_vars: |-
            PROJECT_NUMBER=${{ env.PROJECT_NUMBER }}
            CONSTITUENCY=${{ env.CONSTITUENCY }}
            MAP_KEY=${{ secrets.MAP_KEY }}

      - name: Tag Artifactory Repository
        run: |
          gcloud --quiet artifacts docker tags add \
          europe-west2-docker.pkg.dev/${{ env.PROJECT_ID }}/cloud-run-source-deploy/${{ env.FE_SERVICE }}:latest \
          europe-west2-docker.pkg.dev/${{ env.PROJECT_ID }}/cloud-run-source-deploy/${{ env.FE_SERVICE }}:${{ steps.get-latest-tag.outputs.tag }}

      # If required, use the Cloud Run url output in later steps
      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}